<div class="my-5">
    <h1 class="text-center mb-5"> 게시판 </h1>
    <div class="row">
        <div class="col pt-3">
            게시글수: <span id="total">0</span>
        </div>
        <div class="col text-end">
            <button id = "btn-insert" class="btn btn-primary">글쓰기</button>
        </div>
    </div>

    <hr>
    <div id="div_posts"></div>
    <div class="text-center">
        <button id = "prev" class="btn btn-primary">이전</button>
        <span id="page" class="mx-3">1/1</span>
        <button id= "next" class="btn btn-primary">다음</button>
    </div>
</div>

<script id="temp_posts" type="x-handlebars-template">
    <table class="table">
        {{#each .}}
            <tr>
                <td>{{title}}</td>
                <td>{{date}}</td>
                <td>{{email}}</td>
            </tr>
        {{/each}}
    </table>
</script>

<script type="module">
    import { app } from "/javascripts/firebase.js";
    import { getFirestore,collection } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-firestore.js";
    import { query,orderBy,getDocs,where,doc } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-firestore.js";
    const db = getFirestore(app);
    let page = 1;
    let last = 1;
    let size = 5;
    $("#next").on("click",function(){
        page++;
        getPosts();
    });
    $("#prev").on("click", function(){
        page--;
        getPosts();
    });
    getPosts();
    async function getPosts() {
        const q= query(collection(db,"posts"), orderBy("date", "desc"));
        const snapshot = await getDocs(q);
        // console.log(snapshot.docs);
        let rows=[];
        const total = snapshot.docs.length;
        last = Math.ceil(total/size);
        $("#page").html(`${page}/${last}`);
        $("#total").html(total);
        snapshot.docs.forEach((doc, index)=>{
            // 아이디와 글 데이터를 하나의 데이터로 통합
            const start = (page-1) * size;
            const end = (page*size)-1;
            if(index>=start && index<=end){
                const row = {id:doc.id, ...doc.data()};
                rows.push(row);
            }
        });
        //console.log(rows);
        const temp = Handlebars.compile($("#temp_posts").html());
        $("#div_posts").html(temp(rows));
        if(page==1) $("#prev").attr("disabled", true);
        else $("#prev").attr("disabled", false);
        if(page==last) $("#next").attr("disabled", true);
        else $("#next").attr("disabled", false);
    }
    $("#btn-insert").on("click",function(){
        if(sessionStorage.getItem("uid")){
            // 로그인이 되어 있는 경우
            location.href = "/posts/insert";
        }else{
            // 로그인이 안되어 있는 경우 로그인 페이지 이동 후, 로그인 성공시 다시 글쓰기 화면으로 복귀
            // SessionStorage 의 target 변수를 통한 글쓰기 화면 복귀
            sessionStorage.setItem("target", "/posts/insert");
            location.href="/users/login";
        }
    })
    
</script>